# Generated from Expr.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,122,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,4,17,96,8,
        17,11,17,12,17,97,1,18,4,18,101,8,18,11,18,12,18,102,1,18,3,18,106,
        8,18,1,18,5,18,109,8,18,10,18,12,18,112,9,18,1,19,4,19,115,8,19,
        11,19,12,19,116,1,20,1,20,1,20,1,20,0,0,21,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,1,0,4,2,0,10,10,13,13,1,0,48,57,2,0,65,90,
        97,122,3,0,9,10,13,13,32,32,126,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,1,43,1,0,0,0,3,45,1,0,0,
        0,5,47,1,0,0,0,7,49,1,0,0,0,9,51,1,0,0,0,11,53,1,0,0,0,13,55,1,0,
        0,0,15,57,1,0,0,0,17,59,1,0,0,0,19,63,1,0,0,0,21,67,1,0,0,0,23,71,
        1,0,0,0,25,73,1,0,0,0,27,76,1,0,0,0,29,80,1,0,0,0,31,84,1,0,0,0,
        33,88,1,0,0,0,35,95,1,0,0,0,37,100,1,0,0,0,39,114,1,0,0,0,41,118,
        1,0,0,0,43,44,5,40,0,0,44,2,1,0,0,0,45,46,5,41,0,0,46,4,1,0,0,0,
        47,48,5,43,0,0,48,6,1,0,0,0,49,50,5,45,0,0,50,8,1,0,0,0,51,52,5,
        42,0,0,52,10,1,0,0,0,53,54,5,47,0,0,54,12,1,0,0,0,55,56,5,94,0,0,
        56,14,1,0,0,0,57,58,5,61,0,0,58,16,1,0,0,0,59,60,5,115,0,0,60,61,
        5,105,0,0,61,62,5,110,0,0,62,18,1,0,0,0,63,64,5,99,0,0,64,65,5,111,
        0,0,65,66,5,115,0,0,66,20,1,0,0,0,67,68,5,116,0,0,68,69,5,97,0,0,
        69,70,5,110,0,0,70,22,1,0,0,0,71,72,5,101,0,0,72,24,1,0,0,0,73,74,
        5,108,0,0,74,75,5,110,0,0,75,26,1,0,0,0,76,77,5,108,0,0,77,78,5,
        111,0,0,78,79,5,103,0,0,79,28,1,0,0,0,80,81,5,65,0,0,81,82,5,68,
        0,0,82,83,5,68,0,0,83,30,1,0,0,0,84,85,5,83,0,0,85,86,5,85,0,0,86,
        87,5,66,0,0,87,32,1,0,0,0,88,89,5,67,0,0,89,90,5,72,0,0,90,91,5,
        69,0,0,91,92,5,67,0,0,92,93,5,75,0,0,93,34,1,0,0,0,94,96,7,0,0,0,
        95,94,1,0,0,0,96,97,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,36,1,
        0,0,0,99,101,7,1,0,0,100,99,1,0,0,0,101,102,1,0,0,0,102,100,1,0,
        0,0,102,103,1,0,0,0,103,105,1,0,0,0,104,106,9,0,0,0,105,104,1,0,
        0,0,105,106,1,0,0,0,106,110,1,0,0,0,107,109,7,1,0,0,108,107,1,0,
        0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,38,1,0,0,
        0,112,110,1,0,0,0,113,115,7,2,0,0,114,113,1,0,0,0,115,116,1,0,0,
        0,116,114,1,0,0,0,116,117,1,0,0,0,117,40,1,0,0,0,118,119,7,3,0,0,
        119,120,1,0,0,0,120,121,6,20,0,0,121,42,1,0,0,0,6,0,97,102,105,110,
        116,1,0,1,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    OP_ADD = 3
    OP_SUB = 4
    OP_MUL = 5
    OP_DIV = 6
    OP_POW = 7
    OP_EQ = 8
    TRIG_SIN = 9
    TRIG_COS = 10
    TRIG_TAN = 11
    FUNC_E = 12
    FUNC_LN = 13
    FUNC_LOG = 14
    FINANCE_ADD = 15
    FINANCE_SUB = 16
    FINANCE_CHECK = 17
    NEWLINE = 18
    NUM = 19
    STR = 20
    WS = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", "'='", "'sin'", 
            "'cos'", "'tan'", "'e'", "'ln'", "'log'", "'ADD'", "'SUB'", 
            "'CHECK'" ]

    symbolicNames = [ "<INVALID>",
            "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", "OP_POW", "OP_EQ", "TRIG_SIN", 
            "TRIG_COS", "TRIG_TAN", "FUNC_E", "FUNC_LN", "FUNC_LOG", "FINANCE_ADD", 
            "FINANCE_SUB", "FINANCE_CHECK", "NEWLINE", "NUM", "STR", "WS" ]

    ruleNames = [ "T__0", "T__1", "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", 
                  "OP_POW", "OP_EQ", "TRIG_SIN", "TRIG_COS", "TRIG_TAN", 
                  "FUNC_E", "FUNC_LN", "FUNC_LOG", "FINANCE_ADD", "FINANCE_SUB", 
                  "FINANCE_CHECK", "NEWLINE", "NUM", "STR", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


