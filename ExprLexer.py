# Generated from Expr.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,65,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,1,1,1,1,2,1,2,
        1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,4,7,39,8,7,11,7,12,7,40,1,8,
        4,8,44,8,8,11,8,12,8,45,1,8,3,8,49,8,8,1,8,5,8,52,8,8,10,8,12,8,
        55,9,8,1,9,4,9,58,8,9,11,9,12,9,59,1,10,1,10,1,10,1,10,0,0,11,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,1,0,4,2,0,10,10,
        13,13,1,0,48,57,1,0,97,122,3,0,9,10,13,13,32,32,69,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,23,
        1,0,0,0,3,25,1,0,0,0,5,27,1,0,0,0,7,29,1,0,0,0,9,31,1,0,0,0,11,33,
        1,0,0,0,13,35,1,0,0,0,15,38,1,0,0,0,17,43,1,0,0,0,19,57,1,0,0,0,
        21,61,1,0,0,0,23,24,5,40,0,0,24,2,1,0,0,0,25,26,5,41,0,0,26,4,1,
        0,0,0,27,28,5,43,0,0,28,6,1,0,0,0,29,30,5,45,0,0,30,8,1,0,0,0,31,
        32,5,42,0,0,32,10,1,0,0,0,33,34,5,47,0,0,34,12,1,0,0,0,35,36,5,94,
        0,0,36,14,1,0,0,0,37,39,7,0,0,0,38,37,1,0,0,0,39,40,1,0,0,0,40,38,
        1,0,0,0,40,41,1,0,0,0,41,16,1,0,0,0,42,44,7,1,0,0,43,42,1,0,0,0,
        44,45,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,48,1,0,0,0,47,49,9,
        0,0,0,48,47,1,0,0,0,48,49,1,0,0,0,49,53,1,0,0,0,50,52,7,1,0,0,51,
        50,1,0,0,0,52,55,1,0,0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,18,1,0,0,
        0,55,53,1,0,0,0,56,58,7,2,0,0,57,56,1,0,0,0,58,59,1,0,0,0,59,57,
        1,0,0,0,59,60,1,0,0,0,60,20,1,0,0,0,61,62,7,3,0,0,62,63,1,0,0,0,
        63,64,6,10,0,0,64,22,1,0,0,0,6,0,40,45,48,53,59,1,0,1,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    OP_ADD = 3
    OP_SUB = 4
    OP_MUL = 5
    OP_DIV = 6
    OP_POW = 7
    NEWLINE = 8
    NUM = 9
    STR = 10
    WS = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'" ]

    symbolicNames = [ "<INVALID>",
            "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", "OP_POW", "NEWLINE", 
            "NUM", "STR", "WS" ]

    ruleNames = [ "T__0", "T__1", "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", 
                  "OP_POW", "NEWLINE", "NUM", "STR", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


