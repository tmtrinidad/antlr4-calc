# Generated from Expr.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,107,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,1,1,1,
        1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,
        1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,4,14,81,8,14,11,14,
        12,14,82,1,15,4,15,86,8,15,11,15,12,15,87,1,15,3,15,91,8,15,1,15,
        5,15,94,8,15,10,15,12,15,97,9,15,1,16,4,16,100,8,16,11,16,12,16,
        101,1,17,1,17,1,17,1,17,0,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,1,0,
        4,2,0,10,10,13,13,1,0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,
        111,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,3,39,1,0,0,0,
        5,41,1,0,0,0,7,43,1,0,0,0,9,45,1,0,0,0,11,47,1,0,0,0,13,49,1,0,0,
        0,15,51,1,0,0,0,17,53,1,0,0,0,19,57,1,0,0,0,21,61,1,0,0,0,23,65,
        1,0,0,0,25,69,1,0,0,0,27,73,1,0,0,0,29,80,1,0,0,0,31,85,1,0,0,0,
        33,99,1,0,0,0,35,103,1,0,0,0,37,38,5,40,0,0,38,2,1,0,0,0,39,40,5,
        41,0,0,40,4,1,0,0,0,41,42,5,43,0,0,42,6,1,0,0,0,43,44,5,45,0,0,44,
        8,1,0,0,0,45,46,5,42,0,0,46,10,1,0,0,0,47,48,5,47,0,0,48,12,1,0,
        0,0,49,50,5,94,0,0,50,14,1,0,0,0,51,52,5,61,0,0,52,16,1,0,0,0,53,
        54,5,115,0,0,54,55,5,105,0,0,55,56,5,110,0,0,56,18,1,0,0,0,57,58,
        5,99,0,0,58,59,5,111,0,0,59,60,5,115,0,0,60,20,1,0,0,0,61,62,5,116,
        0,0,62,63,5,97,0,0,63,64,5,110,0,0,64,22,1,0,0,0,65,66,5,65,0,0,
        66,67,5,68,0,0,67,68,5,68,0,0,68,24,1,0,0,0,69,70,5,83,0,0,70,71,
        5,85,0,0,71,72,5,66,0,0,72,26,1,0,0,0,73,74,5,67,0,0,74,75,5,72,
        0,0,75,76,5,69,0,0,76,77,5,67,0,0,77,78,5,75,0,0,78,28,1,0,0,0,79,
        81,7,0,0,0,80,79,1,0,0,0,81,82,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,
        0,83,30,1,0,0,0,84,86,7,1,0,0,85,84,1,0,0,0,86,87,1,0,0,0,87,85,
        1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,91,9,0,0,0,90,89,1,0,0,0,
        90,91,1,0,0,0,91,95,1,0,0,0,92,94,7,1,0,0,93,92,1,0,0,0,94,97,1,
        0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,32,1,0,0,0,97,95,1,0,0,0,98,
        100,7,2,0,0,99,98,1,0,0,0,100,101,1,0,0,0,101,99,1,0,0,0,101,102,
        1,0,0,0,102,34,1,0,0,0,103,104,7,3,0,0,104,105,1,0,0,0,105,106,6,
        17,0,0,106,36,1,0,0,0,6,0,82,87,90,95,101,1,0,1,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    OP_ADD = 3
    OP_SUB = 4
    OP_MUL = 5
    OP_DIV = 6
    OP_POW = 7
    OP_EQ = 8
    TRIG_SIN = 9
    TRIG_COS = 10
    TRIG_TAN = 11
    FINANCE_ADD = 12
    FINANCE_SUB = 13
    FINANCE_CHECK = 14
    NEWLINE = 15
    NUM = 16
    STR = 17
    WS = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", "'='", "'sin'", 
            "'cos'", "'tan'", "'ADD'", "'SUB'", "'CHECK'" ]

    symbolicNames = [ "<INVALID>",
            "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", "OP_POW", "OP_EQ", "TRIG_SIN", 
            "TRIG_COS", "TRIG_TAN", "FINANCE_ADD", "FINANCE_SUB", "FINANCE_CHECK", 
            "NEWLINE", "NUM", "STR", "WS" ]

    ruleNames = [ "T__0", "T__1", "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", 
                  "OP_POW", "OP_EQ", "TRIG_SIN", "TRIG_COS", "TRIG_TAN", 
                  "FINANCE_ADD", "FINANCE_SUB", "FINANCE_CHECK", "NEWLINE", 
                  "NUM", "STR", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


